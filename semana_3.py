# -*- coding: utf-8 -*-
"""Semana 3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OU0Tg6FVGoKkQinw3Mu74SGDeSt92gIj

# **PARTE 1**

---
# **1. Librerias y Dependencias**

---
"""

import pandas as pd
import numpy as np
import requests
from bs4 import BeautifulSoup

#!conda install -c conda-forge geopy --yes # retirar el comentario de esta línea si no ha completado el laboratorio de la API de FourSquare 
from geopy.geocoders import Nominatim # convertir una dirección en valores de latitud y longitud

import requests # librería para manejar solicitudes
from pandas.io.json import json_normalize # librería para convertir un archivo json en un dataframe pandas

# Matplotlib y módulos asociados para graficar
import matplotlib.cm as cm
import matplotlib.colors as colors

# importar k-means desde la fase de agrupación
from sklearn.cluster import KMeans

#!conda install -c conda-forge folium=0.5.0 --yes # retirar el comentario de esta línea si no ha completado el laboratorio de la API de FourSquare
import folium # librería para graficar mapas 

import pandas as pd
import requests
from io import StringIO

print('Libraries imported.')

"""---
# **2. Marco de datos**

---
"""

URL = "https://en.wikipedia.org/wiki/List_of_postal_codes_of_Canada:_M"
page = requests.get(URL)
soup = BeautifulSoup(page.content, "html.parser")

table = soup.find('table')

file=[]
ncol=list(range(0,9))

for i in ncol :
    
    for row in table.find_all('tr'): # in html table row is represented by the table
    # Get all columns in each row.
        cols = row.find_all('p') # in html a column is represented by the tag td or p
        file.append(cols[i].getText())

    # convert to dataframe:
df= pd.DataFrame(file)

"""### 2.1  Tabla de Códigos Postales"""

df["Postal Code"]=df[0].str[0:3]
df["Borough"]=df[0].str[3:].str.split("(",n=1,expand=True)[0]
df["Neigh"]=df[0].str.rsplit("(",n=2,expand=True)[1].str.split(")",n=1,expand=True)[0]
df["Neighbourhood"]=df["Neigh"].str.replace(" / ",",")

postalcode_list=df[(df["Borough"]!="Not assigned\n")]
postalcode_list=postalcode_list.drop([0,"Neigh"],axis=1)

print("\033[43m\033[30m\033[1mRespuesta:\033[0m")
postalcode_list.head()

postalcode_list.shape

"""---
# **3. Análisis exploratorio**

---

### 3.1  Cordenadas de Latitud y Longitud
"""

url = 'http://cocl.us/Geospatial_data'
response = requests.get(url)
content = response.content.decode('utf-8')
Geospatial_Coordinates = pd.read_csv(StringIO(content))

coord_list=pd.merge(postalcode_list,Geospatial_Coordinates,on="Postal Code")

print("\033[43m\033[30m\033[1mRespuesta:\033[0m")
coord_list.head()

"""### 3.2  Agrupación y Segmentación

### 3.2.1  Mapa de los barrios de Toronto
"""

address = 'TORONTO,CA'

geolocator = Nominatim(user_agent="to_explorer")
location = geolocator.geocode(address)
latitude = location.latitude
longitude = location.longitude
print('The geographical coordinates of Toronto are {}, {}.'.format(latitude, longitude))

toronto_data = coord_list[coord_list['Borough'].str.contains('Toronto')].reset_index(drop=True)
toronto_data.groupby("Borough").size().sort_values(ascending=False)

# crear un mapa de Manhattan usando los valores de latitud y longitud
map_toronto = folium.Map(location=[latitude, longitude], zoom_start=11)
print("\033[43m\033[30m\033[1mRespuesta:\033[0m")
# añadir los marcadores al mapa
for lat, lng, label in zip(toronto_data['Latitude'], toronto_data['Longitude'], toronto_data['Neighbourhood']):
    label = folium.Popup(label, parse_html=True)
    folium.CircleMarker(
        [lat, lng],
        radius=5,
        popup=label,
        color='blue',
        fill=True,
        fill_color='#3186cc',
        fill_opacity=0.7,
        parse_html=False).add_to(map_toronto)  
    
map_toronto